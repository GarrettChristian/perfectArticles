{"version":3,"file":"formik.cjs.production.min.js","sources":["../src/utils.ts","../src/FormikContext.tsx","../src/Formik.tsx","../src/Form.tsx","../src/connect.tsx","../src/FieldArray.tsx","../src/ErrorMessage.tsx","../src/FastField.tsx","../src/Field.tsx","../src/withFormik.tsx"],"sourcesContent":["import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n// Assertions\n\n/** @private is the value an empty array? */\nexport const isEmptyArray = (value?: any) =>\n  Array.isArray(value) && value.length === 0;\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): obj is Object =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\n// eslint-disable-next-line no-self-compare\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined || isEmptyArray(value)) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if ((i === 0 && value === undefined) || isEmptyArray(value)) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n","import * as React from 'react';\nimport { FormikContextType } from './types';\nimport invariant from 'tiny-warning';\n\nexport const FormikContext = React.createContext<FormikContextType<any>>(\n  undefined as any\n);\nexport const FormikProvider = FormikContext.Provider;\nexport const FormikConsumer = FormikContext.Consumer;\n\nexport function useFormikContext<Values>() {\n  const formik = React.useContext<FormikContextType<Values>>(FormikContext);\n\n  invariant(\n    !!formik,\n    `Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.`\n  );\n\n  return formik;\n}\n","import * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport isPlainObject from 'lodash/isPlainObject';\nimport {\n  FormikConfig,\n  FormikErrors,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n  FormikProps,\n  FieldMetaProps,\n  FieldInputProps,\n} from './types';\nimport {\n  isFunction,\n  isString,\n  setIn,\n  isEmptyChildren,\n  isPromise,\n  setNestedObjectValues,\n  getActiveElement,\n  getIn,\n  isObject,\n} from './utils';\nimport { FormikProvider } from './FormikContext';\nimport invariant from 'tiny-warning';\nimport { LowPriority, unstable_runWithPriority } from 'scheduler';\n\ntype FormikMessage<Values> =\n  | { type: 'SUBMIT_ATTEMPT' }\n  | { type: 'SUBMIT_FAILURE' }\n  | { type: 'SUBMIT_SUCCESS' }\n  | { type: 'SET_ISVALIDATING'; payload: boolean }\n  | { type: 'SET_ISSUBMITTING'; payload: boolean }\n  | { type: 'SET_VALUES'; payload: Values }\n  | { type: 'SET_FIELD_VALUE'; payload: { field: string; value?: any } }\n  | { type: 'SET_FIELD_TOUCHED'; payload: { field: string; value?: boolean } }\n  | { type: 'SET_FIELD_ERROR'; payload: { field: string; value?: string } }\n  | { type: 'SET_TOUCHED'; payload: FormikTouched<Values> }\n  | { type: 'SET_ERRORS'; payload: FormikErrors<Values> }\n  | { type: 'SET_STATUS'; payload: any }\n  | {\n      type: 'SET_FORMIK_STATE';\n      payload: (s: FormikState<Values>) => FormikState<Values>;\n    }\n  | {\n      type: 'RESET_FORM';\n      payload: FormikState<Values>;\n    };\n\n// State reducer\nfunction formikReducer<Values>(\n  state: FormikState<Values>,\n  msg: FormikMessage<Values>\n) {\n  switch (msg.type) {\n    case 'SET_VALUES':\n      return { ...state, values: msg.payload };\n    case 'SET_TOUCHED':\n      return { ...state, touched: msg.payload };\n    case 'SET_ERRORS':\n      if (isEqual(state.errors, msg.payload)) {\n        return state;\n      }\n\n      return { ...state, errors: msg.payload };\n    case 'SET_STATUS':\n      return { ...state, status: msg.payload };\n    case 'SET_ISSUBMITTING':\n      return { ...state, isSubmitting: msg.payload };\n    case 'SET_ISVALIDATING':\n      return { ...state, isValidating: msg.payload };\n    case 'SET_FIELD_VALUE':\n      return {\n        ...state,\n        values: setIn(state.values, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_TOUCHED':\n      return {\n        ...state,\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_ERROR':\n      return {\n        ...state,\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value),\n      };\n    case 'RESET_FORM':\n      return { ...state, ...msg.payload };\n    case 'SET_FORMIK_STATE':\n      return msg.payload(state);\n    case 'SUBMIT_ATTEMPT':\n      return {\n        ...state,\n        touched: setNestedObjectValues<FormikTouched<Values>>(\n          state.values,\n          true\n        ),\n        isSubmitting: true,\n        submitCount: state.submitCount + 1,\n      };\n    case 'SUBMIT_FAILURE':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    case 'SUBMIT_SUCCESS':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    default:\n      return state;\n  }\n}\n\n// Initial empty states // objects\nconst emptyErrors: FormikErrors<unknown> = {};\nconst emptyTouched: FormikTouched<unknown> = {};\n\n// This is an object that contains a map of all registered fields\n// and their validate functions\ninterface FieldRegistry {\n  [field: string]: {\n    validate: (value: any) => string | Promise<string> | undefined;\n  };\n}\n\nexport function useFormik<Values extends FormikValues = FormikValues>({\n  validateOnChange = true,\n  validateOnBlur = true,\n  validateOnMount = false,\n  isInitialValid,\n  enableReinitialize = false,\n  onSubmit,\n  ...rest\n}: FormikConfig<Values>) {\n  const props = {\n    validateOnChange,\n    validateOnBlur,\n    validateOnMount,\n    onSubmit,\n    ...rest,\n  };\n  const initialValues = React.useRef(props.initialValues);\n  const initialErrors = React.useRef(props.initialErrors || emptyErrors);\n  const initialTouched = React.useRef(props.initialTouched || emptyTouched);\n  const initialStatus = React.useRef(props.initialStatus);\n  const isMounted = React.useRef<boolean>(false);\n  const fieldRegistry = React.useRef<FieldRegistry>({});\n  React.useEffect(() => {\n    if (__DEV__) {\n      invariant(\n        typeof isInitialValid === 'undefined',\n        'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.'\n      );\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  React.useEffect(() => {\n    isMounted.current = true;\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const [state, dispatch] = React.useReducer<\n    React.Reducer<FormikState<Values>, FormikMessage<Values>>\n  >(formikReducer, {\n    values: props.initialValues,\n    errors: props.initialErrors || emptyErrors,\n    touched: props.initialTouched || emptyTouched,\n    status: props.initialStatus,\n    isSubmitting: false,\n    isValidating: false,\n    submitCount: 0,\n  });\n\n  const runValidateHandler = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      return new Promise((resolve, reject) => {\n        const maybePromisedErrors = (props.validate as any)(values, field);\n        if (maybePromisedErrors == null) {\n          // use loose null check here on purpose\n          resolve(emptyErrors);\n        } else if (isPromise(maybePromisedErrors)) {\n          (maybePromisedErrors as Promise<any>).then(\n            errors => {\n              resolve(errors || emptyErrors);\n            },\n            actualException => {\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validate />`,\n                  actualException\n                );\n              }\n\n              reject(actualException);\n            }\n          );\n        } else {\n          resolve(maybePromisedErrors);\n        }\n      });\n    },\n    [props.validate]\n  );\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  const runValidationSchema = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      const validationSchema = props.validationSchema;\n      const schema = isFunction(validationSchema)\n        ? validationSchema(field)\n        : validationSchema;\n      const promise =\n        field && schema.validateAt\n          ? schema.validateAt(field, values)\n          : validateYupSchema(values, schema);\n      return new Promise((resolve, reject) => {\n        promise.then(\n          () => {\n            resolve(emptyErrors);\n          },\n          (err: any) => {\n            // Yup will throw a validation error if validation fails. We catch those and\n            // resolve them into Formik errors. We can sniff is something is a Yup error\n            // by checking error.name.\n            // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n            if (err.name === 'ValidationError') {\n              resolve(yupToFormErrors(err));\n            } else {\n              // We throw any other errors\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validationSchema />`,\n                  err\n                );\n              }\n\n              reject(err);\n            }\n          }\n        );\n      });\n    },\n    [props.validationSchema]\n  );\n\n  const runSingleFieldLevelValidation = React.useCallback(\n    (field: string, value: void | string): Promise<string> => {\n      return new Promise(resolve =>\n        resolve(fieldRegistry.current[field].validate(value))\n      );\n    },\n    []\n  );\n\n  const runFieldLevelValidations = React.useCallback(\n    (values: Values): Promise<FormikErrors<Values>> => {\n      const fieldKeysWithValidation: string[] = Object.keys(\n        fieldRegistry.current\n      ).filter(f => isFunction(fieldRegistry.current[f].validate));\n\n      // Construct an array with all of the field validation functions\n      const fieldValidations: Promise<string>[] =\n        fieldKeysWithValidation.length > 0\n          ? fieldKeysWithValidation.map(f =>\n              runSingleFieldLevelValidation(f, getIn(values, f))\n            )\n          : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n      return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n        fieldErrorsList.reduce((prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        }, {})\n      );\n    },\n    [runSingleFieldLevelValidation]\n  );\n\n  // Run all validations and return the result\n  const runAllValidations = React.useCallback(\n    (values: Values) => {\n      return Promise.all([\n        runFieldLevelValidations(values),\n        props.validationSchema ? runValidationSchema(values) : {},\n        props.validate ? runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, validateErrors]) => {\n        const combinedErrors = deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, validateErrors],\n          { arrayMerge }\n        );\n        return combinedErrors;\n      });\n    },\n    [\n      props.validate,\n      props.validationSchema,\n      runFieldLevelValidations,\n      runValidateHandler,\n      runValidationSchema,\n    ]\n  );\n\n  // Run validations and dispatching the result as low-priority via rAF.\n  //\n  // The thinking is that validation as a result of onChange and onBlur\n  // should never block user input. Note: This method should never be called\n  // during the submission phase because validation prior to submission\n  // is actaully high-priority since we absolutely need to guarantee the\n  // form is valid before executing props.onSubmit.\n  const validateFormWithLowPriority = useEventCallback(\n    (values: Values = state.values) => {\n      return unstable_runWithPriority(LowPriority, () => {\n        return runAllValidations(values).then(combinedErrors => {\n          if (!!isMounted.current) {\n            dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n          }\n          return combinedErrors;\n        });\n      });\n    }\n  );\n\n  // Run all validations methods and update state accordingly\n  const validateFormWithHighPriority = useEventCallback(\n    (values: Values = state.values) => {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runAllValidations(values).then(combinedErrors => {\n        if (!!isMounted.current) {\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          if (!isEqual(state.errors, combinedErrors)) {\n            dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n          }\n        }\n        return combinedErrors;\n      });\n    }\n  );\n\n  React.useEffect(() => {\n    if (validateOnMount && isMounted.current === true) {\n      validateFormWithLowPriority(props.initialValues);\n    }\n  }, [props.initialValues, validateOnMount, validateFormWithLowPriority]);\n\n  const resetForm = React.useCallback(\n    (nextState?: Partial<FormikState<Values>>) => {\n      const values =\n        nextState && nextState.values\n          ? nextState.values\n          : initialValues.current;\n      const errors =\n        nextState && nextState.errors\n          ? nextState.errors\n          : initialErrors.current\n          ? initialErrors.current\n          : props.initialErrors || {};\n      const touched =\n        nextState && nextState.touched\n          ? nextState.touched\n          : initialTouched.current\n          ? initialTouched.current\n          : props.initialTouched || {};\n      const status =\n        nextState && nextState.status\n          ? nextState.status\n          : initialStatus.current\n          ? initialStatus.current\n          : props.initialStatus;\n      initialValues.current = values;\n      initialErrors.current = errors;\n      initialTouched.current = touched;\n      initialStatus.current = status;\n\n      dispatch({\n        type: 'RESET_FORM',\n        payload: {\n          isSubmitting: !!nextState && !!nextState.isSubmitting,\n          errors,\n          touched,\n          status,\n          values,\n          isValidating: !!nextState && !!nextState.isValidating,\n          submitCount:\n            !!nextState &&\n            !!nextState.submitCount &&\n            typeof nextState.submitCount === 'number'\n              ? nextState.submitCount\n              : 0,\n        },\n      });\n    },\n    [props.initialErrors, props.initialStatus, props.initialTouched]\n  );\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialValues.current, props.initialValues)\n    ) {\n      initialValues.current = props.initialValues;\n      resetForm();\n    }\n  }, [enableReinitialize, props.initialValues, resetForm]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialErrors.current, props.initialErrors)\n    ) {\n      initialErrors.current = props.initialErrors || emptyErrors;\n      dispatch({\n        type: 'SET_ERRORS',\n        payload: props.initialErrors || emptyErrors,\n      });\n    }\n  }, [enableReinitialize, props.initialErrors]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialTouched.current, props.initialTouched)\n    ) {\n      initialTouched.current = props.initialTouched || emptyTouched;\n      dispatch({\n        type: 'SET_TOUCHED',\n        payload: props.initialTouched || emptyTouched,\n      });\n    }\n  }, [enableReinitialize, props.initialTouched]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialStatus.current, props.initialStatus)\n    ) {\n      initialStatus.current = props.initialStatus;\n      dispatch({\n        type: 'SET_STATUS',\n        payload: props.initialStatus,\n      });\n    }\n  }, [enableReinitialize, props.initialStatus, props.initialTouched]);\n\n  const validateField = useEventCallback((name: string) => {\n    // This will efficiently validate a single field by avoiding state\n    // changes if the validation function is synchronous. It's different from\n    // what is called when using validateForm.\n\n    if (isFunction(fieldRegistry.current[name].validate)) {\n      const value = getIn(state.values, name);\n      const maybePromise = fieldRegistry.current[name].validate(value);\n      if (isPromise(maybePromise)) {\n        // Only flip isValidating if the function is async.\n        dispatch({ type: 'SET_ISVALIDATING', payload: true });\n        return maybePromise\n          .then((x: any) => x)\n          .then((error: string) => {\n            dispatch({\n              type: 'SET_FIELD_ERROR',\n              payload: { field: name, value: error },\n            });\n            dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          });\n      } else {\n        dispatch({\n          type: 'SET_FIELD_ERROR',\n          payload: {\n            field: name,\n            value: maybePromise as string | undefined,\n          },\n        });\n        return Promise.resolve(maybePromise as string | undefined);\n      }\n    } else {\n      return Promise.resolve();\n    }\n  });\n\n  const registerField = React.useCallback((name: string, { validate }: any) => {\n    fieldRegistry.current[name] = {\n      validate,\n    };\n  }, []);\n\n  const unregisterField = React.useCallback((name: string) => {\n    delete fieldRegistry.current[name];\n  }, []);\n\n  const setTouched = useEventCallback((touched: FormikTouched<Values>) => {\n    dispatch({ type: 'SET_TOUCHED', payload: touched });\n    return validateOnBlur\n      ? validateFormWithLowPriority(state.values)\n      : Promise.resolve();\n  });\n\n  const setErrors = React.useCallback((errors: FormikErrors<Values>) => {\n    dispatch({ type: 'SET_ERRORS', payload: errors });\n  }, []);\n\n  const setValues = useEventCallback((values: Values) => {\n    dispatch({ type: 'SET_VALUES', payload: values });\n    return validateOnChange\n      ? validateFormWithLowPriority(values)\n      : Promise.resolve();\n  });\n\n  const setFieldError = React.useCallback(\n    (field: string, value: string | undefined) => {\n      dispatch({\n        type: 'SET_FIELD_ERROR',\n        payload: { field, value },\n      });\n    },\n    []\n  );\n\n  const setFieldValue = useEventCallback(\n    (field: string, value: any, shouldValidate: boolean = true) => {\n      dispatch({\n        type: 'SET_FIELD_VALUE',\n        payload: {\n          field,\n          value,\n        },\n      });\n      return validateOnChange && shouldValidate\n        ? validateFormWithLowPriority(setIn(state.values, field, value))\n        : Promise.resolve();\n    }\n  );\n\n  const executeChange = React.useCallback(\n    (eventOrTextValue: string | React.ChangeEvent<any>, maybePath?: string) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as React.ChangeEvent<any>).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const target = eventOrTextValue.target\n          ? (eventOrTextValue as React.ChangeEvent<any>).target\n          : (eventOrTextValue as React.ChangeEvent<any>).currentTarget;\n\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n          options,\n          multiple,\n        } = target;\n\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && __DEV__) {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) // checkboxes\n          ? getValueForCheckbox(getIn(state.values, field!), checked, value)\n          : !!multiple // <select multiple>\n          ? getSelectedValues(options)\n          : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        setFieldValue(field, val);\n      }\n    },\n    [setFieldValue, state.values]\n  );\n\n  const handleChange = React.useCallback(\n    (\n      eventOrPath: string | React.ChangeEvent<any>\n    ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n      if (isString(eventOrPath)) {\n        return event => executeChange(event, eventOrPath);\n      } else {\n        executeChange(eventOrPath);\n      }\n    },\n    [executeChange]\n  );\n\n  const setFieldTouched = useEventCallback(\n    (\n      field: string,\n      touched: boolean = true,\n      shouldValidate: boolean = true\n    ) => {\n      dispatch({\n        type: 'SET_FIELD_TOUCHED',\n        payload: {\n          field,\n          value: touched,\n        },\n      });\n      return validateOnBlur && shouldValidate\n        ? validateFormWithLowPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const executeBlur = React.useCallback(\n    (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && __DEV__) {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      setFieldTouched(field, true);\n    },\n    [setFieldTouched]\n  );\n\n  const handleBlur = React.useCallback(\n    (eventOrString: any): void | ((e: any) => void) => {\n      if (isString(eventOrString)) {\n        return event => executeBlur(event, eventOrString);\n      } else {\n        executeBlur(eventOrString);\n      }\n    },\n    [executeBlur]\n  );\n\n  const setFormikState = React.useCallback(\n    (\n      stateOrCb:\n        | FormikState<Values>\n        | ((state: FormikState<Values>) => FormikState<Values>)\n    ): void => {\n      if (isFunction(stateOrCb)) {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb });\n      } else {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: () => stateOrCb });\n      }\n    },\n    []\n  );\n\n  const setStatus = React.useCallback((status: any) => {\n    dispatch({ type: 'SET_STATUS', payload: status });\n  }, []);\n\n  const setSubmitting = React.useCallback((isSubmitting: boolean) => {\n    dispatch({ type: 'SET_ISSUBMITTING', payload: isSubmitting });\n  }, []);\n\n  const imperativeMethods = {\n    resetForm,\n\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setFieldValue,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    setFormikState,\n  };\n\n  const executeSubmit = useEventCallback(() => {\n    return onSubmit(state.values, imperativeMethods);\n  });\n\n  const submitForm = useEventCallback(() => {\n    dispatch({ type: 'SUBMIT_ATTEMPT' });\n    return validateFormWithHighPriority().then(\n      (combinedErrors: FormikErrors<Values>) => {\n        // In case an error was thrown and passed to the resolved Promise,\n        // `combinedErrors` can be an instance of an Error. We need to check\n        // that and abort the submit.\n        // If we don't do that, calling `Object.keys(new Error())` yields an\n        // empty array, which causes the validation to pass and the form\n        // to be submitted.\n\n        const isInstanceOfError = combinedErrors instanceof Error;\n        const isActuallyValid =\n          !isInstanceOfError && Object.keys(combinedErrors).length === 0;\n        if (isActuallyValid) {\n          // Proceed with submit...\n          //\n          // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and\n          // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.\n          // This would be fine in simple cases, but make it impossible to disable submit\n          // buttons where people use callbacks or promises as side effects (which is basically\n          // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,\n          //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.\n          // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle\n          // cleanup of isSubmitting on behalf of the consumer.\n          let promiseOrUndefined;\n          try {\n            promiseOrUndefined = executeSubmit();\n            // Bail if it's sync, consumer is responsible for cleaning up\n            // via setSubmitting(false)\n            if (promiseOrUndefined === undefined) {\n              return;\n            }\n          } catch (error) {\n            throw error;\n          }\n\n          return Promise.resolve(promiseOrUndefined)\n            .then(() => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_SUCCESS' });\n              }\n            })\n            .catch(_errors => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_FAILURE' });\n                // This is a legit error rejected by the onSubmit fn\n                // so we don't want to break the promise chain\n                throw _errors;\n              }\n            });\n        } else if (!!isMounted.current) {\n          // ^^^ Make sure Formik is still mounted before updating state\n          dispatch({ type: 'SUBMIT_FAILURE' });\n          // throw combinedErrors;\n          if (isInstanceOfError) {\n            throw combinedErrors;\n          }\n        }\n        return;\n      }\n    );\n  });\n\n  const handleSubmit = useEventCallback(\n    (e?: React.FormEvent<HTMLFormElement>) => {\n      if (e && e.preventDefault && isFunction(e.preventDefault)) {\n        e.preventDefault();\n      }\n\n      if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n        e.stopPropagation();\n      }\n\n      // Warn if form submission is triggered by a <button> without a\n      // specified `type` attribute during development. This mitigates\n      // a common gotcha in forms with both reset and submit buttons,\n      // where the dev forgets to add type=\"button\" to the reset button.\n      if (__DEV__ && typeof document !== 'undefined') {\n        // Safely get the active element (works with IE)\n        const activeElement = getActiveElement();\n        if (\n          activeElement !== null &&\n          activeElement instanceof HTMLButtonElement\n        ) {\n          invariant(\n            activeElement.attributes &&\n              activeElement.attributes.getNamedItem('type'),\n            'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n          );\n        }\n      }\n\n      submitForm();\n    }\n  );\n  const handleReset = useEventCallback(e => {\n    if (e && e.preventDefault && isFunction(e.preventDefault)) {\n      e.preventDefault();\n    }\n\n    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n      e.stopPropagation();\n    }\n\n    if (props.onReset) {\n      const maybePromisedOnReset = (props.onReset as any)(\n        state.values,\n        imperativeMethods\n      );\n\n      if (isPromise(maybePromisedOnReset)) {\n        (maybePromisedOnReset as Promise<any>).then(resetForm);\n      } else {\n        resetForm();\n      }\n    } else {\n      resetForm();\n    }\n  });\n\n  const getFieldMeta = React.useCallback(\n    (name: string): FieldMetaProps<any> => {\n      return {\n        value: getIn(state.values, name),\n        error: getIn(state.errors, name),\n        touched: !!getIn(state.touched, name),\n        initialValue: getIn(initialValues.current, name),\n        initialTouched: !!getIn(initialTouched.current, name),\n        initialError: getIn(initialErrors.current, name),\n      };\n    },\n    [state.errors, state.touched, state.values]\n  );\n\n  const getFieldProps = React.useCallback(\n    (nameOrOptions): FieldInputProps<any> => {\n      const isAnObject = isObject(nameOrOptions);\n      const name = isAnObject ? nameOrOptions.name : nameOrOptions;\n      const valueState = getIn(state.values, name);\n\n      const field: FieldInputProps<any> = {\n        name,\n        value: valueState,\n        onChange: handleChange,\n        onBlur: handleBlur,\n      };\n      if (isAnObject) {\n        const {\n          type,\n          value: valueProp, // value is special for checkboxes\n          as: is,\n          multiple,\n        } = nameOrOptions;\n\n        if (type === 'checkbox') {\n          if (valueProp === undefined) {\n            field.checked = !!valueState;\n          } else {\n            field.checked = !!(\n              Array.isArray(valueState) && ~valueState.indexOf(valueProp)\n            );\n            field.value = valueProp;\n          }\n        } else if (type === 'radio') {\n          field.checked = valueState === valueProp;\n          field.value = valueProp;\n        } else if (is === 'select' && multiple) {\n          field.value = field.value || [];\n          field.multiple = true;\n        }\n      }\n      return field;\n    },\n    [handleBlur, handleChange, state.values]\n  );\n\n  const dirty = React.useMemo(\n    () => !isEqual(initialValues.current, state.values),\n    [initialValues.current, state.values]\n  );\n\n  const isValid = React.useMemo(\n    () =>\n      typeof isInitialValid !== 'undefined'\n        ? dirty\n          ? state.errors && Object.keys(state.errors).length === 0\n          : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: FormikConfig<Values>) => boolean)(props)\n          : (isInitialValid as boolean)\n        : state.errors && Object.keys(state.errors).length === 0,\n    [isInitialValid, dirty, state.errors, props]\n  );\n\n  const ctx = {\n    ...state,\n    initialValues: initialValues.current,\n    initialErrors: initialErrors.current,\n    initialTouched: initialTouched.current,\n    initialStatus: initialStatus.current,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    resetForm,\n    setErrors,\n    setFormikState,\n    setFieldTouched,\n    setFieldValue,\n    setFieldError,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    submitForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    isValid,\n    dirty,\n    unregisterField,\n    registerField,\n    getFieldProps,\n    getFieldMeta,\n    validateOnBlur,\n    validateOnChange,\n    validateOnMount,\n  };\n\n  return ctx;\n}\n\nexport function Formik<\n  Values extends FormikValues = FormikValues,\n  ExtraProps = {}\n>(props: FormikConfig<Values> & ExtraProps) {\n  const formikbag = useFormik<Values>(props);\n  const { component, children, render } = props;\n  React.useEffect(() => {\n    if (__DEV__) {\n      invariant(\n        !props.render,\n        `<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>`\n      );\n    }\n    // eslint-disable-next-line\n  }, []);\n  return (\n    <FormikProvider value={formikbag}>\n      {component\n        ? React.createElement(component as any, formikbag)\n        : render\n        ? render(formikbag)\n        : children // children come last, always called\n        ? isFunction(children)\n          ? (children as (bag: FormikProps<Values>) => React.ReactNode)(\n              formikbag as FormikProps<Values>\n            )\n          : !isEmptyChildren(children)\n          ? React.Children.only(children)\n          : null\n        : null}\n    </FormikProvider>\n  );\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n    ${htmlContent}\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: FormikErrors<Values> = {};\n  if (yupError.inner) {\n    if (yupError.inner.length === 0) {\n      return setIn(errors, yupError.path, yupError.message);\n    }\n    for (let err of yupError.inner) {\n      if (!getIn(errors, err.path)) {\n        errors = setIn(errors, err.path, err.message);\n      }\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  const validateData: FormikValues = prepareDataForValidation(values);\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n\n/**\n * Recursively prepare values.\n */\nexport function prepareDataForValidation<T extends FormikValues>(\n  values: T\n): FormikValues {\n  let data: FormikValues = {};\n  for (let k in values) {\n    if (values.hasOwnProperty(k)) {\n      const key = String(k);\n      if (Array.isArray(values[key]) === true) {\n        data[key] = values[key].map((value: any) => {\n          if (Array.isArray(value) === true || isPlainObject(value)) {\n            return prepareDataForValidation(value);\n          } else {\n            return value !== '' ? value : undefined;\n          }\n        });\n      } else if (isPlainObject(values[key])) {\n        data[key] = prepareDataForValidation(values[key]);\n      } else {\n        data[key] = values[key] !== '' ? values[key] : undefined;\n      }\n    }\n  }\n  return data;\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n\n/** Return multi select values based on an array of options */\nfunction getSelectedValues(options: any[]) {\n  return Array.from(options)\n    .filter(el => el.selected)\n    .map(el => el.value);\n}\n\n/** Return the next value for a checkbox */\nfunction getValueForCheckbox(\n  currentValue: string | any[],\n  checked: boolean,\n  valueProp: any\n) {\n  // eslint-disable-next-line eqeqeq\n  if (valueProp == 'true' || valueProp == 'false') {\n    return !!checked;\n  }\n\n  if (checked && valueProp) {\n    return Array.isArray(currentValue)\n      ? currentValue.concat(valueProp)\n      : [valueProp];\n  }\n  if (!Array.isArray(currentValue)) {\n    return !currentValue;\n  }\n  const index = currentValue.indexOf(valueProp);\n  if (index < 0) {\n    return currentValue;\n  }\n  return currentValue.slice(0, index).concat(currentValue.slice(index + 1));\n}\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n    ? React.useLayoutEffect\n    : React.useEffect;\n\nfunction useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  const ref: any = React.useRef(fn);\n\n  // we copy a ref to the callback scoped to the current state/props on each render\n  useIsomorphicLayoutEffect(() => {\n    ref.current = fn;\n  });\n\n  return React.useCallback(\n    (...args: any[]) => ref.current.apply(void 0, args),\n    []\n  ) as T;\n}\n","import * as React from 'react';\nimport { useFormikContext } from './FormikContext';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\ntype FormProps = React.ComponentPropsWithoutRef<'form'>;\n\n// @todo tests\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props: FormikFormProps, ref) => {\n    // iOS needs an \"action\" attribute for nice input: https://stackoverflow.com/a/39485162/406725\n    // We default the action to \"#\" in case the preventDefault fails (just updates the URL hash)\n    const { action, ...rest } = props;\n    const _action = action || '#';\n    const { handleReset, handleSubmit } = useFormikContext();\n    return (\n      <form\n        onSubmit={handleSubmit}\n        ref={ref}\n        onReset={handleReset}\n        action={_action}\n        {...rest}\n      />\n    );\n  }\n);\n\nForm.displayName = 'Form';\n","import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { FormikContextType } from './types';\nimport { FormikConsumer } from './FormikContext';\nimport invariant from 'tiny-warning';\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContextType<Values> }>\n) {\n  const C: React.SFC<OuterProps> = (props: OuterProps) => (\n    <FormikConsumer>\n      {formik => {\n        invariant(\n          !!formik,\n          `Formik context is undefined, please verify you are rendering <Form>, <Field>, <FastField>, <FieldArray>, or your custom context-using component as a child of a <Formik> component. Component name: ${Comp.name}`\n        );\n        return <Comp {...props} formik={formik} />;\n      }}\n    </FormikConsumer>\n  );\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.SFC<OuterProps> & {\n    WrappedComponent: React.ReactNode;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics(\n    C,\n    Comp as React.ComponentClass<\n      OuterProps & { formik: FormikContextType<Values> }\n    > // cast type to ComponentClass (even if SFC)\n  ) as React.ComponentType<OuterProps>;\n}\n","import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContextType,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport { getIn, isEmptyChildren, isFunction, setIn } from './utils';\nimport isEqual from 'react-fast-compare';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = copyArrayLike(array);\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (\n  arrayLike: ArrayLike<any>,\n  indexA: number,\n  indexB: number\n) => {\n  const copy = copyArrayLike(arrayLike);\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (\n  arrayLike: ArrayLike<any>,\n  index: number,\n  value: any\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (\n  arrayLike: ArrayLike<any>,\n  index: number,\n  value: any\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy[index] = value;\n  return copy;\n};\n\nconst copyArrayLike = (arrayLike: ArrayLike<any>) => {\n  if (!arrayLike) {\n    return [];\n  } else if (Array.isArray(arrayLike)) {\n    return [...arrayLike];\n  } else {\n    const maxIndex = Object.keys(arrayLike)\n      .map(key => parseInt(key))\n      .reduce((max, el) => (el > max ? el : max), 0);\n    return Array.from({ ...arrayLike, length: maxIndex + 1 });\n  }\n};\n\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContextType<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContextType<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    // @todo Fix TS 3.2.1\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  componentDidUpdate(\n    prevProps: FieldArrayConfig & { formik: FormikContextType<Values> }\n  ) {\n    if (\n      !isEqual(\n        getIn(prevProps.formik.values, prevProps.name),\n        getIn(this.props.formik.values, this.props.name)\n      ) &&\n      this.props.formik.validateOnChange\n    ) {\n      this.props.formik.validateForm();\n    }\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n\n      formik: { setFormikState },\n    } = this.props;\n    setFormikState((prevState: FormikState<any>) => {\n      let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n      let updateTouched =\n        typeof alterTouched === 'function' ? alterTouched : fn;\n\n      return {\n        ...prevState,\n        values: setIn(\n          prevState.values,\n          name,\n          fn(getIn(prevState.values, name))\n        ),\n        errors: alterErrors\n          ? setIn(\n              prevState.errors,\n              name,\n              updateErrors(getIn(prevState.errors, name))\n            )\n          : prevState.errors,\n        touched: alterTouched\n          ? setIn(\n              prevState.touched,\n              name,\n              updateTouched(getIn(prevState.touched, name))\n            )\n          : prevState.touched,\n      };\n    });\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (arrayLike: ArrayLike<any>) => [\n        ...copyArrayLike(arrayLike),\n        cloneDeep(value),\n      ],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? copyArrayLike(array) : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n      ? (render as any)(props)\n      : children // children come last, always called\n      ? typeof children === 'function'\n        ? (children as any)(props)\n        : !isEmptyChildren(children)\n        ? React.Children.only(children)\n        : null\n      : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\nimport { FormikContextType } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: (errorMessage: string) => React.ReactNode;\n  render?: (errorMessage: string) => React.ReactNode;\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContextType<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContextType<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render)\n          ? render(error)\n          : null\n        : children\n        ? isFunction(children)\n          ? children(error)\n          : null\n        : component\n        ? React.createElement(component, rest as any, error)\n        : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContextType<any> }\n>(ErrorMessageImpl);\n","import * as React from 'react';\n\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContextType,\n  FieldMetaProps,\n  FieldInputProps,\n} from './types';\nimport invariant from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\nimport { FieldConfig } from './Field';\nimport { connect } from './connect';\n\ntype $FixMe = any;\n\nexport interface FastFieldProps<V = any> {\n  field: FieldInputProps<V>;\n  meta: FieldMetaProps<V>;\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport type FastFieldConfig<T> = FieldConfig & {\n  /** Override FastField's default shouldComponentUpdate */\n  shouldUpdate?: (\n    nextProps: T & GenericFieldHTMLAttributes,\n    props: {}\n  ) => boolean;\n};\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\ntype FastFieldInnerProps<Values = {}, Props = {}> = FastFieldAttributes<\n  Props\n> & { formik: FormikContextType<Values> };\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldInnerProps<Values, Props>,\n  {}\n> {\n  constructor(props: FastFieldInnerProps<Values, Props>) {\n    super(props);\n    const { render, children, component, as: is, name } = props;\n    invariant(\n      !render,\n      `<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={${name}}>{props => ...}</FastField> instead.`\n    );\n    invariant(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    invariant(\n      !(is && children && isFunction(children)),\n      'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.'\n    );\n\n    invariant(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    invariant(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(props: FastFieldInnerProps<Values, Props>) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      props.name !== this.props.name ||\n      getIn(props.formik.values, this.props.name) !==\n        getIn(this.props.formik.values, this.props.name) ||\n      getIn(props.formik.errors, this.props.name) !==\n        getIn(this.props.formik.errors, this.props.name) ||\n      getIn(props.formik.touched, this.props.name) !==\n        getIn(this.props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      props.formik.isSubmitting !== this.props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, {\n      validate: this.props.validate,\n    });\n  }\n\n  componentDidUpdate(prevProps: FastFieldAttributes<Props>) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      as: is,\n      children,\n      component,\n      shouldUpdate,\n      formik,\n      ...props\n    } = this.props as FastFieldInnerProps<Values, Props>;\n\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = {\n      value:\n        props.type === 'radio' || props.type === 'checkbox'\n          ? props.value // React uses checked={} for these inputs\n          : getIn(formik.values, name),\n      name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n    };\n    const meta = {\n      value: getIn(formik.values, name),\n      error: getIn(formik.errors, name),\n      touched: !!getIn(formik.touched, name),\n      initialValue: getIn(formik.initialValues, name),\n      initialTouched: !!getIn(formik.initialTouched, name),\n      initialError: getIn(formik.initialErrors, name),\n    };\n\n    const bag = { field, meta, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (component) {\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n      if (typeof component === 'string') {\n        const { innerRef, ...rest } = props;\n        return React.createElement(\n          component,\n          { ref: innerRef, ...field, ...(rest as $FixMe) },\n          children\n        );\n      }\n      // We don't pass `meta` for backwards compat\n      return React.createElement(\n        component as React.ComponentClass<$FixMe>,\n        { field, form: formik, ...props },\n        children\n      );\n    }\n\n    // default to input here so we can check for both `as` and `children` above\n    const asElement = is || 'input';\n\n    if (typeof asElement === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        asElement,\n        { ref: innerRef, ...field, ...(rest as $FixMe) },\n        children\n      );\n    }\n\n    return React.createElement(\n      asElement as React.ComponentClass,\n      { ...field, ...props },\n      children\n    );\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n","import * as React from 'react';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FieldMetaProps,\n  FieldInputProps,\n  FieldValidator,\n} from './types';\nimport { useFormikContext } from './FormikContext';\nimport { isFunction, isEmptyChildren, isObject } from './utils';\nimport invariant from 'tiny-warning';\n\nexport interface FieldProps<V = any> {\n  field: FieldInputProps<V>;\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n  meta: FieldMetaProps<V>;\n}\n\nexport interface FieldConfig {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n    | keyof JSX.IntrinsicElements\n    | React.ComponentType<FieldProps<any>>\n    | React.ComponentType;\n\n  /**\n   * Component to render. Can either be a string e.g. 'select', 'input', or 'textarea', or a component.\n   */\n  as?:\n    | React.ComponentType<FieldProps<any>['field']>\n    | keyof JSX.IntrinsicElements\n    | React.ComponentType;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   * @deprecated\n   */\n  render?: (props: FieldProps<any>) => React.ReactNode;\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<any>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: FieldValidator;\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = GenericFieldHTMLAttributes &\n  FieldConfig &\n  T & { name: string };\n\nexport function useField<Val = any>(\n  propsOrFieldName: string | FieldAttributes<Val>\n): [FieldInputProps<Val>, FieldMetaProps<Val>] {\n  const formik = useFormikContext();\n  const {\n    getFieldProps,\n    getFieldMeta,\n    registerField,\n    unregisterField,\n  } = formik;\n  const isAnObject = isObject(propsOrFieldName);\n  const fieldName = isAnObject\n    ? (propsOrFieldName as FieldAttributes<Val>).name\n    : (propsOrFieldName as string);\n  const validateFn = isAnObject\n    ? (propsOrFieldName as FieldAttributes<Val>).validate\n    : undefined;\n  React.useEffect(() => {\n    if (fieldName) {\n      registerField(fieldName, {\n        validate: validateFn,\n      });\n    }\n    return () => {\n      if (fieldName) {\n        unregisterField(fieldName);\n      }\n    };\n  }, [registerField, unregisterField, fieldName, validateFn]);\n  if (__DEV__) {\n    invariant(\n      formik,\n      'useField() / <Field /> must be used underneath a <Formik> component or withFormik() higher order component'\n    );\n  }\n\n  if (isObject(propsOrFieldName)) {\n    invariant(\n      (propsOrFieldName as FieldAttributes<Val>).name,\n      'Invalid field name. Either pass `useField` a string or an object containing a `name` key.'\n    );\n\n    return [\n      getFieldProps(propsOrFieldName),\n      getFieldMeta((propsOrFieldName as FieldAttributes<Val>).name),\n    ];\n  }\n\n  return [\n    getFieldProps({ name: propsOrFieldName }),\n    getFieldMeta(propsOrFieldName),\n  ];\n}\n\nexport function Field({\n  validate,\n  name,\n  render,\n  children,\n  as: is, // `as` is reserved in typescript lol\n  component,\n  ...props\n}: FieldAttributes<any>) {\n  const {\n    validate: _validate,\n    validationSchema: _validationSchema,\n\n    ...formik\n  } = useFormikContext();\n\n  React.useEffect(() => {\n    if (__DEV__) {\n      invariant(\n        !render,\n        `<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Field name=\"${name}\" render={({field, form}) => ...} /> with <Field name=\"${name}\">{({field, form, meta}) => ...}</Field>`\n      );\n\n      invariant(\n        !(is && children && isFunction(children)),\n        'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.'\n      );\n\n      invariant(\n        !(component && children && isFunction(children)),\n        'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n      );\n\n      invariant(\n        !(render && children && !isEmptyChildren(children)),\n        'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n      );\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  // Register field and field-level validation with parent <Formik>\n  const { registerField, unregisterField } = formik;\n  React.useEffect(() => {\n    registerField(name, {\n      validate: validate,\n    });\n    return () => {\n      unregisterField(name);\n    };\n  }, [registerField, unregisterField, name, validate]);\n  const field = formik.getFieldProps({ name, ...props });\n  const meta = formik.getFieldMeta(name);\n  const legacyBag = { field, form: formik };\n\n  if (render) {\n    return render({ ...legacyBag, meta });\n  }\n\n  if (isFunction(children)) {\n    return children({ ...legacyBag, meta });\n  }\n\n  if (component) {\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        component,\n        { ref: innerRef, ...field, ...rest },\n        children\n      );\n    }\n    // We don't pass `meta` for backwards compat\n    return React.createElement(\n      component,\n      { field, form: formik, ...props },\n      children\n    );\n  }\n\n  // default to input here so we can check for both `as` and `children` above\n  const asElement = is || 'input';\n\n  if (typeof asElement === 'string') {\n    const { innerRef, ...rest } = props;\n    return React.createElement(\n      asElement,\n      { ref: innerRef, ...field, ...rest },\n      children\n    );\n  }\n\n  return React.createElement(asElement, { ...field, ...props }, children);\n}\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikHelpers,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n  FormikTouched,\n  FormikErrors,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik actions + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikHelpers<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig<Props> {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToStatus?: (props: Props) => any;\n\n  /**\n   * Map props to the form touched state\n   */\n  mapPropsToTouched?: (props: Props) => FormikTouched<Values>;\n\n  /**\n   * Map props to the form touched state\n   */\n  mapPropsToErrors?: (props: Props) => FormikErrors<Values>;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.StatelessComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps extends object,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        // @todo TypeScript fix\n        (val as any)[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikHelpers<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        const { children, ...props } = this.props as any;\n        return (\n          <Formik\n            {...props}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            initialStatus={\n              config.mapPropsToStatus && config.mapPropsToStatus(this.props)\n            }\n            initialErrors={\n              config.mapPropsToErrors && config.mapPropsToErrors(this.props)\n            }\n            initialTouched={\n              config.mapPropsToTouched && config.mapPropsToTouched(this.props)\n            }\n            onSubmit={this.handleSubmit as any}\n            children={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics(\n      C,\n      Component as React.ComponentClass<OuterProps & FormikProps<Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<OuterProps>;\n  };\n}\n"],"names":["isEmptyArray","value","Array","isArray","length","isFunction","obj","isObject","isInteger","String","Math","floor","Number","isString","Object","prototype","toString","call","isEmptyChildren","children","React","count","isPromise","then","getIn","key","def","p","path","toPath","undefined","setIn","res","clone","resVal","i","pathArray","currentPath","currentObj","slice","nextPath","setNestedObjectValues","object","visited","response","WeakMap","keys","k","val","get","set","FormikContext","FormikProvider","Provider","FormikConsumer","Consumer","useFormikContext","formik","invariant","formikReducer","state","msg","type","values","payload","touched","isEqual","errors","status","isSubmitting","isValidating","field","submitCount","emptyErrors","emptyTouched","useFormik","validateOnChange","validateOnBlur","validateOnMount","isInitialValid","enableReinitialize","onSubmit","rest","props","initialValues","initialErrors","initialTouched","initialStatus","isMounted","fieldRegistry","current","dispatch","runValidateHandler","Promise","resolve","reject","maybePromisedErrors","validate","actualException","runValidationSchema","validationSchema","schema","promise","validateAt","validateYupSchema","err","name","yupToFormErrors","runSingleFieldLevelValidation","runFieldLevelValidations","fieldKeysWithValidation","filter","f","fieldValidations","map","all","fieldErrorsList","reduce","prev","curr","index","runAllValidations","deepmerge","arrayMerge","validateFormWithLowPriority","useEventCallback","unstable_runWithPriority","LowPriority","combinedErrors","validateFormWithHighPriority","resetForm","nextState","validateField","maybePromise","x","error","registerField","unregisterField","setTouched","setErrors","setValues","setFieldError","setFieldValue","shouldValidate","executeChange","eventOrTextValue","maybePath","parsed","persist","target","currentTarget","checked","options","multiple","id","test","parseFloat","isNaN","currentValue","valueProp","concat","indexOf","getValueForCheckbox","from","el","selected","getSelectedValues","handleChange","eventOrPath","event","setFieldTouched","executeBlur","e","handleBlur","eventOrString","setFormikState","stateOrCb","setStatus","setSubmitting","imperativeMethods","validateForm","executeSubmit","submitForm","isInstanceOfError","Error","promiseOrUndefined","_errors","handleSubmit","preventDefault","stopPropagation","handleReset","onReset","maybePromisedOnReset","getFieldMeta","initialValue","initialError","getFieldProps","nameOrOptions","isAnObject","valueState","onChange","onBlur","is","as","dirty","isValid","Formik","formikbag","component","render","only","yupError","inner","message","sync","context","validateData","prepareDataForValidation","abortEarly","data","hasOwnProperty","isPlainObject","source","destination","forEach","shouldClone","isMergeableObject","push","useIsomorphicLayoutEffect","window","document","createElement","fn","ref","args","apply","Form","action","_action","connect","Comp","C","componentDisplayName","displayName","constructor","WrappedComponent","hoistNonReactStatics","move","array","to","copy","copyArrayLike","splice","swap","arrayLike","indexA","indexB","a","insert","replace","maxIndex","parseInt","max","FieldArrayInner","alterTouched","alterErrors","_this","prevState","updateErrors","updateTouched","updateArrayField","cloneDeep","arr","unshift","remove","pop","bind","componentDidUpdate","prevProps","this","result","tmp","handlePush","handlePop","handleSwap","handleMove","handleInsert","handleReplace","handleUnshift","handleRemove","form","FieldArray","ErrorMessage","shouldComponentUpdate","touch","FastField","shouldUpdate","componentDidMount","componentWillUnmount","restOfFormik","bag","meta","innerRef","asElement","legacyBag","doc","activeElement","body","propsOrFieldName","fieldName","validateFn","mapPropsToValues","vanillaProps","config","Component","actions","formikProps","mapPropsToStatus","mapPropsToErrors","mapPropsToTouched","renderFormComponent"],"mappings":"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"}
{"ast":null,"code":"var _jsxFileName = \"/Users/garrettchristian/Documents/cs 2019/perfectSenseInterview/perfect-articles-frontend/src/component/commentArea/CommentAreaComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport LineComponent from '../LineComponent';\nimport CommentComponent from '../comment/CommentComponent';\nimport CommentDataService from '../../service/CommentDataService';\nimport \"./CommentAreaStyle.css\";\n\nclass CommentAreaComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comment: '',\n      comments: [],\n      commentUserName: '',\n      commentText: '',\n      isOpened: false,\n      articleId: this.props.articleId\n    };\n    this.toggleBox = this.toggleBox.bind(this);\n    this.refreshComment = this.refreshComment.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  }\n\n  componentDidMount() {\n    this.refreshComment();\n  }\n\n  refreshComment() {\n    this.setState({\n      isOpened: false\n    }); //reclose the full comment box\n\n    CommentDataService.getTopCommentFromArticleId(this.state.articleId) //get the most recent comment\n    .then(response => {\n      console.log(response);\n      this.setState({\n        comment: response.data\n      });\n    });\n  }\n\n  toggleBox() {\n    this.setState({\n      isOpened: true\n    }); //open the full comment box\n\n    CommentDataService.getCommentsFromArticleId(this.state.articleId) //get all the comments\n    .then(response => {\n      console.log(response);\n      this.setState({\n        comments: response.data\n      });\n    });\n  }\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.commentUserName) {\n      //check that there is a value for username\n      errors.commentUserName = 'Enter a UserName';\n    } else if (!values.commentText) {\n      //check that there is a value for text\n      errors.commentText = 'Enter a Comment';\n    }\n\n    return errors;\n  }\n\n  onSubmit(values) {\n    let articleId = this.state.articleId;\n    let comment = {\n      userName: values.commentUserName,\n      text: values.commentText,\n      likes: 0,\n      dislikes: 0\n    }; //Add the comment then refresh the component to show the new comment you've added\n\n    CommentDataService.addNewCommentToArticle(articleId, comment).then(response => {\n      console.log(response);\n      values.commentUserName = '';\n      values.commentText = '';\n      this.refreshComment();\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          isOpened = _this$state.isOpened,\n          commentUserName = _this$state.commentUserName,\n          commentText = _this$state.commentText;\n    return React.createElement(React.Fragment, null, React.createElement(\"h5\", {\n      className: \"subHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Add Comment\"), React.createElement(Formik //Form for comment submission\n    , {\n      initialValues: {\n        commentUserName,\n        commentText\n      },\n      onSubmit: this.onSubmit,\n      validateOnChange: false,\n      validateOnBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, props => React.createElement(Form, {\n      className: \"addComment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(ErrorMessage, {\n      name: \"description\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Display Name\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"commentUserName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Comment\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"commentText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      className: \"btn btn-dark\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Post\"))), React.createElement(LineComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, !isOpened && //Disapears when Display all comments is pressed\n    React.createElement(React.Fragment, null, this.state.comment.id > -100 && //Back end returns negative id if there are no comments for an article\n    React.createElement(CommentComponent, {\n      commentId: this.state.comment.id,\n      comment: this.state.comment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-block viewCommentsButton\",\n      onClick: this.toggleBox,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Display All Comments\"), React.createElement(LineComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), isOpened && //Opens when Display all comments is pressed\n    React.createElement(\"div\", {\n      className: \"boxContent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"subHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Comments\"), React.createElement(LineComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), this.state.comments.length !== 0 && //If there are not comments dont display this section\n    this.state.comments.map(comment => React.createElement(CommentComponent, {\n      key: comment.id,\n      commentId: comment.id,\n      comment: comment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })), \" \", this.state.comments.length === 0 && //If there are not comments instead display this section\n    React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"No Comments Currrently...\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Add a Comment to Begin the Conversation!\"), React.createElement(LineComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default CommentAreaComponent;","map":{"version":3,"sources":["/Users/garrettchristian/Documents/cs 2019/perfectSenseInterview/perfect-articles-frontend/src/component/commentArea/CommentAreaComponent.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","LineComponent","CommentComponent","CommentDataService","CommentAreaComponent","constructor","props","state","comment","comments","commentUserName","commentText","isOpened","articleId","toggleBox","bind","refreshComment","onSubmit","validate","componentDidMount","setState","getTopCommentFromArticleId","then","response","console","log","data","getCommentsFromArticleId","values","errors","userName","text","likes","dislikes","addNewCommentToArticle","render","id","length","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport LineComponent from '../LineComponent';\nimport CommentComponent from '../comment/CommentComponent';\nimport CommentDataService from '../../service/CommentDataService';\nimport \"./CommentAreaStyle.css\"\n\nclass CommentAreaComponent extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n        comment: '',\n        comments: [],\n        commentUserName: '',\n        commentText: '',\n        isOpened: false,\n        articleId: this.props.articleId\n      };\n      this.toggleBox = this.toggleBox.bind(this);\n      this.refreshComment = this.refreshComment.bind(this);\n      this.onSubmit = this.onSubmit.bind(this);\n      this.validate = this.validate.bind(this);\n  }\n    \n  componentDidMount() {\n    this.refreshComment();\n  }\n\n  refreshComment() {\n    this.setState({isOpened: false}); //reclose the full comment box\n    CommentDataService.getTopCommentFromArticleId(this.state.articleId) //get the most recent comment\n    .then(\n        response => {\n            console.log(response);\n            this.setState({comment: response.data})\n        }\n    )\n  }\n\n  toggleBox() {\n    this.setState({isOpened: true}); //open the full comment box\n    CommentDataService.getCommentsFromArticleId(this.state.articleId) //get all the comments\n        .then(\n          response => {\n                console.log(response);\n                this.setState({comments: response.data})\n            }\n        )\n  }\n\n  validate(values) {\n    let errors = {}\n    if (!values.commentUserName) { //check that there is a value for username\n        errors.commentUserName = 'Enter a UserName'\n    } else if (!values.commentText) { //check that there is a value for text\n      errors.commentText = 'Enter a Comment'\n    }\n    return errors\n  }\n\n  onSubmit(values) {\n\n    let articleId = this.state.articleId\n    let comment = {\n        userName: values.commentUserName,\n        text: values.commentText,\n        likes: 0,\n        dislikes: 0\n    }\n\n    //Add the comment then refresh the component to show the new comment you've added\n    CommentDataService.addNewCommentToArticle(articleId, comment)\n      .then(\n        response => {\n          console.log(response);\n          values.commentUserName = '';\n          values.commentText = '';\n          this.refreshComment();\n      })\n  }\n    \n  render() {        \n    const { isOpened, commentUserName, commentText} = this.state;\n\n    return (\n      <>\n      <h5 className=\"subHeading\">Add Comment</h5>\n      <Formik //Form for comment submission\n        initialValues={{ commentUserName, commentText}}\n        onSubmit={this.onSubmit}\n        validateOnChange={false}\n        validateOnBlur={false}\n        validate={this.validate}\n        enableReinitialize={true}>\n      {\n          (props) => (\n              <Form className=\"addComment\">\n                  <ErrorMessage name=\"description\" component=\"div\"\n                      className=\"alert alert-warning\" />\n                  <fieldset className=\"form-group\">\n                    <label >Display Name</label>\n                    <Field className=\"form-control\" type=\"text\" name=\"commentUserName\"  />\n                  </fieldset>\n                  <fieldset className=\"form-group\">\n                    <label >Comment</label>\n                    <Field className=\"form-control\" type=\"text\" name=\"commentText\"  />\n                  </fieldset>\n                  <button className=\"btn btn-dark\" type=\"submit\">Post</button>\n              </Form>\n          )\n      }\n      </Formik>\n      <LineComponent/>\n\n      <div className=\"box\">\n        { !isOpened && ( //Disapears when Display all comments is pressed\n          <>\n          \n          { this.state.comment.id > -100 && ( //Back end returns negative id if there are no comments for an article\n            <CommentComponent commentId={this.state.comment.id} comment={this.state.comment}/>\n          )}\n\n        <button className=\"btn btn-block viewCommentsButton\" onClick={this.toggleBox}>Display All Comments</button>\n        <LineComponent/>\n        </>)}\n        \n        {isOpened && ( //Opens when Display all comments is pressed\n\n          <div className=\"boxContent\">\n            <h4 className=\"subHeading\">Comments</h4>\n            <LineComponent/>\n\n            { this.state.comments.length !== 0 && //If there are not comments dont display this section\n              this.state.comments.map(\n                    comment =>\n                    <CommentComponent key={comment.id} commentId={comment.id} comment={comment}/>\n                  )\n            } {this.state.comments.length === 0 && ( //If there are not comments instead display this section\n                <div>\n                  <p>No Comments Currrently...</p>\n                  <p>Add a Comment to Begin the Conversation!</p>\n                  <LineComponent/>\n                </div>\n            )}\n          </div>\n        )}\n\n      </div>\n      </>\n    );\n  }\n\n}\n\nexport default CommentAreaComponent"]},"metadata":{},"sourceType":"module"}
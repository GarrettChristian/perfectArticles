{"ast":null,"code":"var _jsxFileName = \"/Users/garrettchristian/Documents/cs 2019/perfectSenseInterview/perfect-articles-frontend/src/component/comment/CommentComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport LineComponent from '../LineComponent';\nimport CommentDataService from '../../service/CommentDataService';\nimport \"./CommentStyle.css\";\n\nclass CommentComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comment: '',\n      comments: [],\n      commentUserName: '',\n      commentText: 'This article was perfect...',\n      isOpened: false,\n      id: this.props.articleId\n    };\n    this.toggleBox = this.toggleBox.bind(this);\n    this.refreshComment = this.refreshComment.bind(this);\n  }\n\n  componentDidMount() {\n    this.refreshComment();\n  }\n\n  refreshComment() {\n    CommentDataService.getTopCommentFromArticleId(this.state.id).then(response => {\n      console.log(response);\n      this.setState({\n        comment: response.data\n      });\n    });\n  }\n\n  toggleBox() {\n    this.setState({\n      isOpened: true\n    });\n    CommentDataService.getCommentsFromArticleId(this.state.id).then(response => {\n      console.log(response);\n      this.setState({\n        comments: response.data\n      });\n    });\n  } // validate(values) {\n  //   let errors = {}\n  //   if (!values.description) {\n  //       errors.description = 'Enter a Description'\n  //   } else if (values.description.length < 5) {\n  //       errors.description = 'Enter atleast 5 Characters in Description'\n  //   }\n  //   return errors\n  // }\n  // onSubmit(values) {\n  //   let username = INSTRUCTOR\n  //   let course = {\n  //       id: this.state.id,\n  //       description: values.description,\n  //       targetDate: values.targetDate\n  //   }\n  // }\n\n\n  render() {\n    const isOpened = this.state.isOpened;\n    return React.createElement(React.Fragment, null, React.createElement(\"h5\", {\n      className: \"subHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Add Comment\"), React.createElement(\"form\", {\n      className: \"addComment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Display Name\"), React.createElement(\"input\", {\n      type: \"textarea\",\n      className: \"form-control\",\n      id: \"userName\",\n      placeholder: \"William Howard Taft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Comment\"), React.createElement(\"input\", {\n      type: \"textarea\",\n      className: \"form-control addCommentTextArea\",\n      id: \"comment\",\n      placeholder: \"This article was perfect...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      className: \"btn btn-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Post\")), React.createElement(Formik, {\n      initialValues: (this.state.commentUserName, this.state.commentText),\n      onSubmit: this.onSubmit,\n      validateOnChange: false,\n      validateOnBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, props => React.createElement(Form, {\n      className: \"addComment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(ErrorMessage, {\n      name: \"description\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Display Name\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"id\",\n      placeholder: \"William Howard Taft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Comment\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"description\",\n      placeholder: \"This article was perfect...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Post\"))), React.createElement(LineComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, !isOpened && React.createElement(React.Fragment, null, this.state.comment.id > -100 && React.createElement(\"div\", {\n      className: \"contianer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"displayComment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"commentHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"commentUserName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, this.state.comment.userName), React.createElement(\"p\", {\n      className: \"commentDate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \" - \", this.state.comment.date)), React.createElement(\"p\", {\n      className: \"commentText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, this.state.comment.text), React.createElement(\"div\", {\n      className: \"commentButtons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"likeDislikeButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Like\"), React.createElement(\"p\", {\n      className: \"likeDislike\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \" \", this.state.comment.likes), React.createElement(\"p\", {\n      className: \"likeDislikeButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Dislike\"), React.createElement(\"p\", {\n      className: \"likeDislike\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \" \", this.state.comment.dislikes)), React.createElement(LineComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      className: \"btn btn-block viewCommentsButton\",\n      onClick: this.toggleBox,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Load More Comments\")), isOpened && React.createElement(\"div\", {\n      className: \"boxContent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"subHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Comments\"), React.createElement(LineComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), this.state.comments.length != 0 && this.state.comments.map(comment => React.createElement(\"div\", {\n      className: \"contianer\",\n      key: comment.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"displayComment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"commentHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"commentUserName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, comment.userName), React.createElement(\"p\", {\n      className: \"commentDate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \" - \", comment.date)), React.createElement(\"p\", {\n      className: \"commentText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, comment.text), React.createElement(\"div\", {\n      className: \"commentButtons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"likeDislikeButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Like\"), React.createElement(\"p\", {\n      className: \"likeDislike\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \" \", comment.likes), React.createElement(\"p\", {\n      className: \"likeDislikeButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Dislike\"), React.createElement(\"p\", {\n      className: \"likeDislike\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \" \", comment.dislikes)), React.createElement(LineComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    })))), \" \", this.state.comments.length == 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"No Comments Currrently...\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Add a Comment to Begin the Conversation!\"), React.createElement(LineComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default CommentComponent;","map":{"version":3,"sources":["/Users/garrettchristian/Documents/cs 2019/perfectSenseInterview/perfect-articles-frontend/src/component/comment/CommentComponent.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","LineComponent","CommentDataService","CommentComponent","constructor","props","state","comment","comments","commentUserName","commentText","isOpened","id","articleId","toggleBox","bind","refreshComment","componentDidMount","getTopCommentFromArticleId","then","response","console","log","setState","data","getCommentsFromArticleId","render","onSubmit","validate","userName","date","text","likes","dislikes","length","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport LineComponent from '../LineComponent';\nimport CommentDataService from '../../service/CommentDataService';\nimport \"./CommentStyle.css\"\n\nclass CommentComponent extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n        comment: '',\n        comments: [],\n        commentUserName: '',\n        commentText: 'This article was perfect...',\n        isOpened: false,\n        id: this.props.articleId\n      };\n      this.toggleBox = this.toggleBox.bind(this);\n      this.refreshComment = this.refreshComment.bind(this);\n  }\n    \n  componentDidMount() {\n    this.refreshComment();\n  }\n\n  refreshComment() {\n    CommentDataService.getTopCommentFromArticleId(this.state.id)\n    .then(\n        response => {\n            console.log(response);\n            this.setState({comment: response.data})\n        }\n    )\n  }\n\n  toggleBox() {\n    this.setState({isOpened: true});\n    CommentDataService.getCommentsFromArticleId(this.state.id)\n        .then(\n            response => {\n                console.log(response);\n                this.setState({comments: response.data})\n            }\n        )\n  }\n\n  // validate(values) {\n  //   let errors = {}\n  //   if (!values.description) {\n  //       errors.description = 'Enter a Description'\n  //   } else if (values.description.length < 5) {\n  //       errors.description = 'Enter atleast 5 Characters in Description'\n  //   }\n\n  //   return errors\n  // }\n\n  // onSubmit(values) {\n  //   let username = INSTRUCTOR\n\n  //   let course = {\n  //       id: this.state.id,\n  //       description: values.description,\n  //       targetDate: values.targetDate\n  //   }\n\n  // }\n    \n  render() {        \n    const { isOpened } = this.state;\n    return (\n\n      <>\n      <h5 className=\"subHeading\">Add Comment</h5>\n\n      <form className=\"addComment\">\n        <div className=\"form-group\">\n          {/* <ErrorMessage name=\"description\" component=\"div\"\n          className=\"alert alert-warning\" /> */}\n          <label >Display Name</label>\n          <input type=\"textarea\" className=\"form-control\" id=\"userName\" placeholder=\"William Howard Taft\"/>\n        </div>\n        <div className=\"form-group\">\n          <label >Comment</label>\n          <input type=\"textarea\" className=\"form-control addCommentTextArea\" id=\"comment\" placeholder=\"This article was perfect...\"/>\n        </div>\n        <button className=\"btn btn-dark\">Post</button>\n      </form>\n\n      <Formik\n        initialValues={ this.state.commentUserName, this.state.commentText }\n        onSubmit={this.onSubmit}\n        validateOnChange={false}\n        validateOnBlur={false}\n        validate={this.validate}\n        enableReinitialize={true}\n      >\n      {\n          (props) => (\n              <Form className=\"addComment\">\n                  <ErrorMessage name=\"description\" component=\"div\"\n                      className=\"alert alert-warning\" />\n                  <fieldset className=\"form-group\">\n                    <label >Display Name</label>\n                    <Field className=\"form-control\" type=\"text\" name=\"id\" placeholder=\"William Howard Taft\" />\n                  </fieldset>\n                  <fieldset className=\"form-group\">\n                    <label >Comment</label>\n                    <Field className=\"form-control\" type=\"text\" name=\"description\" placeholder=\"This article was perfect...\" />\n                  </fieldset>\n                  <button className=\"btn btn-success\" type=\"submit\">Post</button>\n              </Form>\n          )\n      }\n      </Formik>\n\n\n      <LineComponent/>\n\n      <div className=\"box\">\n        { !isOpened && (\n          <>\n          \n          { this.state.comment.id > -100 && (\n\n            <div className=\"contianer\">\n                <div className=\"displayComment\">\n                  <div className=\"commentHeader\">\n                      <p className=\"commentUserName\">{this.state.comment.userName}</p>\n                      <p className=\"commentDate\"> - {this.state.comment.date}</p>\n                  </div>\n                  <p className=\"commentText\">{this.state.comment.text}</p>\n                  <div className=\"commentButtons\">\n                      <p className=\"likeDislikeButton\">Like</p> \n                      <p className=\"likeDislike\"> {this.state.comment.likes}</p>\n                      <p className=\"likeDislikeButton\">Dislike</p>\n                      <p className=\"likeDislike\"> {this.state.comment.dislikes}</p>\n                  </div>\n                  <LineComponent/>\n                </div>                  \n              </div>\n          )}\n\n        <button className=\"btn btn-block viewCommentsButton\" onClick={this.toggleBox}>Load More Comments</button>\n        </>)}\n        {isOpened && (\n\n          <div className=\"boxContent\">\n\n            <h4 className=\"subHeading\">Comments</h4>\n\n            <LineComponent/>\n\n            { this.state.comments.length != 0 &&\n              this.state.comments.map(\n                    comment =>\n                      <div className=\"contianer\" key={comment.id}>\n                      <div className=\"displayComment\">\n                        <div className=\"commentHeader\">\n                          <p className=\"commentUserName\">{comment.userName}</p>\n                          <p className=\"commentDate\"> - {comment.date}</p>\n                        </div>\n                        <p className=\"commentText\">{comment.text}</p>\n                        <div className=\"commentButtons\">\n                            <p className=\"likeDislikeButton\">Like</p> \n                            <p className=\"likeDislike\"> {comment.likes}</p>\n                            <p className=\"likeDislikeButton\">Dislike</p>\n                            <p className=\"likeDislike\"> {comment.dislikes}</p>\n                        </div>\n                        <LineComponent/>\n                      </div>                  \n                    </div>\n                  )\n            } {this.state.comments.length == 0 && (\n                <div>\n                  <p>No Comments Currrently...</p>\n                  <p>Add a Comment to Begin the Conversation!</p>\n                  <LineComponent/>\n                </div>\n            )}\n\n          </div>\n        )}\n      </div>\n      </>\n    );\n  }\n\n}\n\nexport default CommentComponent"]},"metadata":{},"sourceType":"module"}
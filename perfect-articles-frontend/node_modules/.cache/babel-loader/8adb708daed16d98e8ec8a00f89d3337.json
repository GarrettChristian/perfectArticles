{"ast":null,"code":"var _jsxFileName = \"/Users/garrettchristian/DocumentsDesktop/csSeniorYear/brightSpotInterview/perfectArticles/perfect-articles-frontend/src/component/comment/CommentComponent.jsx\";\nimport React, { Component } from 'react';\nimport LineComponent from '../LineComponent';\nimport CommentDataService from '../../service/CommentDataService';\nimport \"./CommentStyle.css\";\n\nclass CommentComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comment: this.props.comment,\n      commentId: this.props.commentId,\n      liked: false,\n      disliked: false,\n      likedColor: 'black',\n      dislikedColor: 'black'\n    };\n    this.refreshComment = this.refreshComment.bind(this);\n    this.refreshCommentAfterLike = this.refreshCommentAfterLike.bind(this);\n  }\n\n  componentDidMount() {\n    this.refreshComment();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.commentId !== prevProps.commentId) {\n      //refresh for an added comment\n      this.refreshComment();\n    }\n  }\n\n  refreshComment() {\n    this.setState({\n      comment: this.props.comment\n    });\n    this.setState({\n      commentId: this.props.commentId\n    });\n  }\n\n  refreshCommentAfterLike() {\n    CommentDataService.getCommentById(this.state.commentId) //Gets new comment for live reload when liked\n    .then(response => {\n      console.log(response);\n      this.setState({\n        comment: response.data\n      });\n    });\n  }\n\n  likedComment(comment) {\n    let likes = \"LIKES\"; // option for likes\n\n    if (!this.state.disliked) {\n      //cannot select dislike if like is selected\n      if (this.state.liked) {\n        //cannot double like something\n        CommentDataService.updateLikesDislikesComment(comment.id, likes, -1) //unlike\n        .then(() => {\n          this.setState({\n            liked: false\n          });\n          this.setState({\n            likedColor: 'black'\n          });\n          this.refreshCommentAfterLike();\n        });\n      } else {\n        CommentDataService.updateLikesDislikesComment(comment.id, likes, 1).then(() => {\n          this.setState({\n            liked: true\n          });\n          this.setState({\n            likedColor: 'red'\n          });\n          this.refreshCommentAfterLike();\n        });\n      }\n    }\n  }\n\n  dislikedComment(comment) {\n    let likes = \"DISLIKES\"; // option for dislikes\n\n    if (!this.state.liked) {\n      //cannot select like if dislike is selected\n      if (this.state.disliked) {\n        //cannot double dislike something\n        CommentDataService.updateLikesDislikesComment(comment.id, likes, -1) //undislike\n        .then(() => {\n          this.setState({\n            disliked: false\n          });\n          this.setState({\n            dislikedColor: 'black'\n          });\n          this.refreshCommentAfterLike();\n        });\n      } else {\n        CommentDataService.updateLikesDislikesComment(comment.id, likes, 1).then(() => {\n          this.setState({\n            disliked: true\n          });\n          this.setState({\n            dislikedColor: 'red'\n          });\n          this.refreshCommentAfterLike();\n        });\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"contianer displayComment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"commentHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"commentUserName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.state.comment.userName), React.createElement(\"p\", {\n      className: \"commentDate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"posted: \", this.state.comment.date)), React.createElement(\"p\", {\n      className: \"commentText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.state.comment.text), React.createElement(\"div\", {\n      className: \"commentButtons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"likeDislikeButton\",\n      style: {\n        color: this.state.likedColor\n      },\n      onClick: () => this.likedComment(this.state.comment),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Like\"), React.createElement(\"p\", {\n      className: \"likeDislike\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \" \", this.state.comment.likes), React.createElement(\"p\", {\n      className: \"likeDislikeButton\",\n      style: {\n        color: this.state.dislikedColor\n      },\n      onClick: () => this.dislikedComment(this.state.comment),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Dislike\"), React.createElement(\"p\", {\n      className: \"likeDislike\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \" \", this.state.comment.dislikes)), React.createElement(LineComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default CommentComponent;","map":{"version":3,"sources":["/Users/garrettchristian/DocumentsDesktop/csSeniorYear/brightSpotInterview/perfectArticles/perfect-articles-frontend/src/component/comment/CommentComponent.jsx"],"names":["React","Component","LineComponent","CommentDataService","CommentComponent","constructor","props","state","comment","commentId","liked","disliked","likedColor","dislikedColor","refreshComment","bind","refreshCommentAfterLike","componentDidMount","componentDidUpdate","prevProps","setState","getCommentById","then","response","console","log","data","likedComment","likes","updateLikesDislikesComment","id","dislikedComment","render","userName","date","text","color","dislikes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport LineComponent from '../LineComponent';\nimport CommentDataService from '../../service/CommentDataService';\nimport \"./CommentStyle.css\"\n\nclass CommentComponent extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n        comment: this.props.comment,\n        commentId: this.props.commentId,\n        liked: false,\n        disliked: false,\n        likedColor: 'black',\n        dislikedColor: 'black'\n      };\n      this.refreshComment = this.refreshComment.bind(this);\n      this.refreshCommentAfterLike = this.refreshCommentAfterLike.bind(this);\n  }\n    \n  componentDidMount() {\n    this.refreshComment()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.commentId !== prevProps.commentId) { //refresh for an added comment\n      this.refreshComment()\n    }\n  }\n\n  refreshComment() {\n    this.setState({comment: this.props.comment});\n    this.setState({commentId: this.props.commentId})\n  }\n\n  refreshCommentAfterLike() {\n    CommentDataService.getCommentById(this.state.commentId) //Gets new comment for live reload when liked\n    .then(\n        response => {\n            console.log(response);\n            this.setState({comment: response.data})\n        }\n    )\n  }\n\n  likedComment(comment) {\n\n    let likes = \"LIKES\" // option for likes\n\n    if (!this.state.disliked) { //cannot select dislike if like is selected\n      if (this.state.liked) { //cannot double like something\n        CommentDataService.updateLikesDislikesComment(comment.id, likes, -1) //unlike\n          .then(() => {\n            this.setState({liked: false});\n            this.setState({likedColor: 'black'});\n            this.refreshCommentAfterLike();\n          })\n      } else {\n        CommentDataService.updateLikesDislikesComment(comment.id, likes, 1)\n          .then(() => {\n            this.setState({liked: true});\n            this.setState({likedColor: 'red'});\n            this.refreshCommentAfterLike();\n          })\n      }\n    }\n  }\n\n  dislikedComment(comment) {\n\n    let likes = \"DISLIKES\" // option for dislikes\n\n    if (!this.state.liked) { //cannot select like if dislike is selected\n      if (this.state.disliked) { //cannot double dislike something\n        CommentDataService.updateLikesDislikesComment(comment.id, likes, -1) //undislike\n          .then(() => {\n            this.setState({disliked: false});\n            this.setState({dislikedColor: 'black'});\n            this.refreshCommentAfterLike();\n            })\n      } else {\n        CommentDataService.updateLikesDislikesComment(comment.id, likes, 1)\n          .then(() => {\n            this.setState({disliked: true});\n            this.setState({dislikedColor: 'red'});\n            this.refreshCommentAfterLike();\n          })\n      }\n    }\n  }\n    \n  render() {\n    return (\n        <div className=\"contianer displayComment\">\n          <div className=\"commentHeader\">\n              <p className=\"commentUserName\">{this.state.comment.userName}</p>\n              <p className=\"commentDate\">posted: {this.state.comment.date}</p>\n          </div>\n          <p className=\"commentText\">{this.state.comment.text}</p>\n          <div className=\"commentButtons\">\n              <p className=\"likeDislikeButton\" style={{color: this.state.likedColor}} onClick={\n                () => this.likedComment(this.state.comment)}>Like</p> \n              <p className=\"likeDislike\"> {this.state.comment.likes}</p>\n              <p className=\"likeDislikeButton\" style={{color: this.state.dislikedColor}} onClick={\n                () => this.dislikedComment(this.state.comment)}>Dislike</p>\n              <p className=\"likeDislike\"> {this.state.comment.dislikes}</p>\n          </div>\n          <LineComponent/>\n        </div>\n    );\n  }\n\n}\n\nexport default CommentComponent"]},"metadata":{},"sourceType":"module"}